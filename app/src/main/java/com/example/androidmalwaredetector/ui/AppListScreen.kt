package com.example.androidmalwaredetector.ui

import android.content.Context
import android.content.pm.ApplicationInfo
import android.content.pm.PackageManager
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.example.androidmalwaredetector.ui.components.AppCard

@Composable
fun AppListScreen(context: Context) {
    var scanned by remember { mutableStateOf(false) }
    var showSystemApps by remember { mutableStateOf(false) }

    val packageManager = context.packageManager
    val apps = remember(scanned to showSystemApps) {
        if (!scanned) emptyList()
        else {
            val allApps = packageManager.getInstalledApplications(PackageManager.GET_META_DATA)
            allApps.filter {
                val isSystem = it.flags and ApplicationInfo.FLAG_SYSTEM != 0
                showSystemApps == isSystem
            }
        }
    }

    Column(modifier = Modifier.fillMaxSize().padding(16.dp)) {
        if (!scanned) {
            Button(
                onClick = { scanned = true },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Scan")
            }
        } else {
            Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {
                FilterButton("User Apps", !showSystemApps) { showSystemApps = false }
                FilterButton("System Apps", showSystemApps) { showSystemApps = true }
            }

            Spacer(modifier = Modifier.height(8.dp))

            LazyColumn {
                items(apps) { app ->
                    AppCard(app = app, packageManager = packageManager)
                }
            }
        }
    }
}

@Composable
fun FilterButton(label: String, selected: Boolean, onClick: () -> Unit) {
    Button(
        onClick = onClick,
        colors = ButtonDefaults.buttonColors(
            containerColor = if (selected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary
        )
    ) {
        Text(label)
    }
}
