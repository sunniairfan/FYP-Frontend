package com.example.androidmalwaredetector.ui.screens

import android.content.ActivityNotFoundException
import android.content.Intent
import android.content.pm.PackageManager
import android.content.pm.PermissionInfo
import android.graphics.drawable.Drawable
import android.net.Uri
import android.provider.Settings
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.core.graphics.drawable.toBitmap
import androidx.navigation.NavController
import com.example.androidmalwaredetector.ui.components.StatusBadge
import com.example.androidmalwaredetector.util.getSha256
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.json.JSONArray
import org.json.JSONObject
import java.io.DataOutputStream
import java.io.File
import java.net.HttpURLConnection
import java.net.URL
import java.util.UUID

@Composable
fun AppDetailScreen(
    packageName: String,
    appName: String,
    navController: NavController,
    status: String? = null
) {
    // Get the Android context and PackageManager
    val context = LocalContext.current
    val pm = context.packageManager
    // State variables for app details
    var appIcon by remember { mutableStateOf<Drawable?>(null) }
    var sha256 by remember { mutableStateOf("") }
    var sizeInMB by remember { mutableStateOf(0.0) }
    var dangerousPermissions by remember { mutableStateOf<List<String>>(emptyList()) }
    var uploadStatus by remember { mutableStateOf<String?>(null) }
    val coroutineScope = rememberCoroutineScope()

    var isUploading by remember { mutableStateOf(false) }

    // Cyber theme colors
    val cyberBg = Color(0xFF0A0A0A)
    val cyberAccent = Color(0xFF00FFFF)
    val cyberSecondary = Color(0xFF1A1A2E)
    val cyberError = Color(0xFFFF4444)
    val cyberText = Color(0xFFE0E0E0)
    val cyberDim = Color(0xFF808080)
    // Load app details when packageName changes
    LaunchedEffect(packageName) {
        try {
            // Get ApplicationInfo for the given package
            val appInfo = pm.getApplicationInfo(packageName, 0)
            appIcon = pm.getApplicationIcon(appInfo)
            // Get APK file details
            val apkPath = appInfo.sourceDir
            val apkFile = File(apkPath)
            sha256 = getSha256(apkFile) // Compute SHA-256 hash
            sizeInMB = apkFile.length().toDouble() / (1024 * 1024)
            // Get requested permissions
            val packageInfo = pm.getPackageInfo(packageName, PackageManager.GET_PERMISSIONS)
            val requestedPermissions = packageInfo.requestedPermissions
            val filtered = mutableListOf<String>()
            // Filter for dangerous permissions
            requestedPermissions?.forEach { permission ->
                try {
                    val permInfo = pm.getPermissionInfo(permission, 0)
                    if ((permInfo.protectionLevel and PermissionInfo.PROTECTION_DANGEROUS) != 0) {
                        filtered.add(permission)
                    }
                } catch (_: Exception) {}
            }

            dangerousPermissions = filtered
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
    // Function to upload app data and APK to a server
    suspend fun uploadApp(endpoint: String): Boolean {
        return withContext(Dispatchers.IO) { // Run on IO dispatcher for network operations
            var conn: HttpURLConnection? = null
            try {
                val url = URL(endpoint)
                conn = url.openConnection() as HttpURLConnection
                val boundary = "----${UUID.randomUUID()}" // Unique boundary for multipart form
                conn.requestMethod = "POST"
                conn.setRequestProperty("Content-Type", "multipart/form-data; boundary=$boundary")
                conn.doOutput = true

                val appInfo = pm.getApplicationInfo(packageName, 0)
                val apkFile = File(appInfo.sourceDir)

                // Create JSON metadata for the app
                val metadata = JSONObject().apply {
                    put("apps", JSONArray().apply {
                        put(JSONObject().apply {
                            put("appName", appName)
                            put("packageName", packageName)
                            put("sha256", sha256)
                            put("sizeMB", sizeInMB)
                            put("permissions", JSONArray(dangerousPermissions))
                            put("uploadedByUser", true)
                        })
                    })
                }.toString()
                // Write multipart form data
                DataOutputStream(conn.outputStream).use { os ->
                    // --- metadata part ---
                    os.writeBytes("--$boundary\r\n")
                    os.writeBytes("Content-Disposition: form-data; name=\"metadata\"\r\n")
                    os.writeBytes("Content-Type: application/json\r\n\r\n")
                    os.writeBytes(metadata)
                    os.writeBytes("\r\n")

                    // --- apk file part ---
                    os.writeBytes("--$boundary\r\n")
                    os.writeBytes("Content-Disposition: form-data; name=\"apk\"; filename=\"base.apk\"\r\n")
                    os.writeBytes("Content-Type: application/vnd.android.package-archive\r\n\r\n")
                    apkFile.inputStream().use { input -> input.copyTo(os) }
                    os.writeBytes("\r\n--$boundary--\r\n")
                }
                // Check response
                val responseCode = conn.responseCode
                val responseText = conn.inputStream?.bufferedReader()?.readText() ?: ""

                if (responseCode in 200..299) {
                    uploadStatus = "✅ Uploaded successfully: $responseText"
                    true
                } else {
                    uploadStatus = "❌ Upload failed: $responseText"
                    false
                }
            } catch (e: Exception) {
                uploadStatus = "❌ Upload failed: ${e.message}"
                false
            } finally {
                conn?.disconnect()
            }
        }
    }
    // Function to initiate app uninstallation
    fun uninstallApp() {
        try {
            // Method 1: Direct uninstall (works for user-installed apps)
            val uninstallIntent = Intent(Intent.ACTION_UNINSTALL_PACKAGE).apply {
                data = Uri.parse("package:$packageName")
                putExtra(Intent.EXTRA_RETURN_RESULT, true)
            }
            context.startActivity(uninstallIntent)
        } catch (e: ActivityNotFoundException) {
            try {
                // Method 2: Legacy uninstall method
                val deleteIntent = Intent(Intent.ACTION_DELETE).apply {
                    data = Uri.parse("package:$packageName")
                }
                context.startActivity(deleteIntent)
            } catch (e2: Exception) {
                try {
                    // Method 3: Open app info settings
                    val settingsIntent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                        data = Uri.parse("package:$packageName")
                    }
                    context.startActivity(settingsIntent)
                } catch (e3: Exception) {
                    e3.printStackTrace()
                }
            }
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                Brush.verticalGradient(
                    colors = listOf(cyberBg, Color(0xFF0F0F23))
                )
            )
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(20.dp)
                .verticalScroll(rememberScrollState()),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // App Icon with cyber glow effect
            appIcon?.let {
                Box(
                    modifier = Modifier
                        .size(120.dp)
                        .padding(bottom = 12.dp)
                        .shadow(
                            elevation = 8.dp,
                            shape = RoundedCornerShape(16.dp),
                            ambientColor = cyberAccent,
                            spotColor = cyberAccent
                        )
                        .border(
                            width = 1.dp,
                            color = cyberAccent.copy(alpha = 0.5f),
                            shape = RoundedCornerShape(16.dp)
                        )
                        .clip(RoundedCornerShape(16.dp))
                        .background(cyberSecondary)
                ) {
                    Image(
                        bitmap = it.toBitmap().asImageBitmap(),
                        contentDescription = null,
                        modifier = Modifier
                            .size(100.dp)
                            .align(Alignment.Center)
                    )
                }
            }

            Text(
                text = appName,
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold,
                color = cyberAccent
            )

            status?.let {
                Spacer(modifier = Modifier.height(6.dp))
                StatusBadge(status = it)
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Info cards with cyber styling
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 12.dp),
                colors = CardDefaults.cardColors(
                    containerColor = cyberSecondary
                ),
                shape = RoundedCornerShape(12.dp),
                border = androidx.compose.foundation.BorderStroke(1.dp, cyberAccent.copy(alpha = 0.3f))
            ) {
                Text(
                    text = "SIZE: %.2f MB".format(sizeInMB),
                    style = MaterialTheme.typography.bodyMedium,
                    color = cyberText,
                    modifier = Modifier.padding(16.dp)
                )
            }

            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 20.dp),
                colors = CardDefaults.cardColors(
                    containerColor = cyberSecondary
                ),
                shape = RoundedCornerShape(12.dp),
                border = androidx.compose.foundation.BorderStroke(1.dp, cyberAccent.copy(alpha = 0.3f))
            ) {
                Column(modifier = Modifier.padding(16.dp)) {
                    Text(
                        text = "SHA-256 HASH:",
                        style = MaterialTheme.typography.titleSmall,
                        fontWeight = FontWeight.Medium,
                        color = cyberAccent
                    )
                    Text(
                        text = sha256,
                        style = MaterialTheme.typography.bodySmall,
                        color = cyberDim,
                        modifier = Modifier.padding(top = 4.dp)
                    )
                }
            }

            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 24.dp),
                colors = CardDefaults.cardColors(
                    containerColor = cyberSecondary
                ),
                shape = RoundedCornerShape(12.dp),
                border = androidx.compose.foundation.BorderStroke(
                    1.dp,
                    if (dangerousPermissions.isNotEmpty()) cyberError.copy(alpha = 0.5f) else cyberAccent.copy(alpha = 0.3f)
                )
            ) {
                Column(modifier = Modifier.padding(16.dp)) {
                    Text(
                        text = "DANGEROUS PERMISSIONS:",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.SemiBold,
                        color = if (dangerousPermissions.isNotEmpty()) cyberError else cyberAccent
                    )
                    if (dangerousPermissions.isEmpty()) {
                        Text(
                            text = "No dangerous permissions found",
                            style = MaterialTheme.typography.bodyMedium,
                            color = cyberText,
                            modifier = Modifier.padding(top = 8.dp)
                        )
                    } else {
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(top = 8.dp)
                        ) {
                            dangerousPermissions.forEach {
                                Text(
                                    text = "⚠ $it",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = cyberError,
                                    modifier = Modifier.padding(start = 8.dp, top = 4.dp)
                                )
                            }
                        }
                    }
                }
            }

            // Cyber-styled upload button
            Button(
                onClick = {
                    if (!isUploading) {
                        coroutineScope.launch {
                            isUploading = true
                            // Upload app to server
                            val success = uploadApp("http://192.168.137.1:5000/uploadapp/upload")
                            isUploading = false
                        }
                    }
                },
                enabled = !isUploading,
                modifier = Modifier
                    .height(48.dp)
                    .shadow(
                        elevation = if (isUploading) 2.dp else 6.dp,
                        shape = RoundedCornerShape(8.dp),
                        ambientColor = cyberAccent,
                        spotColor = cyberAccent
                    ),
                colors = ButtonDefaults.buttonColors(
                    containerColor = cyberAccent,
                    contentColor = cyberBg,
                    disabledContainerColor = cyberSecondary.copy(alpha = 0.6f),
                    disabledContentColor = cyberDim
                ),
                shape = RoundedCornerShape(8.dp),
                border = androidx.compose.foundation.BorderStroke(1.dp, cyberAccent.copy(alpha = 0.7f))
            ) {
                if (isUploading) {
                    CircularProgressIndicator(
                        modifier = Modifier.size(16.dp),
                        color = cyberBg,
                        strokeWidth = 2.dp
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Uploading...", color = cyberBg)
                } else {
                    Text("Upload App", color = cyberBg, fontWeight = FontWeight.Medium)
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            // Uninstall app button
            Button(
                onClick = { uninstallApp() },
                modifier = Modifier
                    .height(48.dp)
                    .shadow(
                        elevation = 6.dp,
                        shape = RoundedCornerShape(8.dp),
                        ambientColor = cyberError,
                        spotColor = cyberError
                    ),
                colors = ButtonDefaults.buttonColors(
                    containerColor = cyberError,
                    contentColor = Color.White
                ),
                shape = RoundedCornerShape(8.dp),
                border = androidx.compose.foundation.BorderStroke(1.dp, cyberError.copy(alpha = 0.7f))
            ) {
                Text("Uninstall App", color = Color.White, fontWeight = FontWeight.Medium)
            }

            uploadStatus?.let {
                Spacer(modifier = Modifier.height(16.dp))
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = cyberSecondary.copy(alpha = 0.8f)
                    ),
                    shape = RoundedCornerShape(8.dp),
                    border = androidx.compose.foundation.BorderStroke(
                        1.dp,
                        if (it.startsWith("✅")) cyberAccent.copy(alpha = 0.5f) else cyberError.copy(alpha = 0.5f)
                    )
                ) {
                    Text(
                        text = it,
                        textAlign = TextAlign.Center,
                        color = if (it.startsWith("✅")) cyberAccent else cyberError,
                        modifier = Modifier.padding(12.dp)
                    )
                }
            }
        }
    }
}