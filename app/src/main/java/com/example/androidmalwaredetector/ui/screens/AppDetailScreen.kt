package com.example.androidmalwaredetector.ui.screens

import android.content.pm.PackageManager
import android.graphics.drawable.Drawable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import coil.compose.AsyncImage
import com.example.androidmalwaredetector.util.getSha256
import java.io.File

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AppDetailScreen(packageName: String, navController: NavController) {
    val context = LocalContext.current
    val pm = context.packageManager

    val appInfo = remember {
        try {
            pm.getApplicationInfo(packageName, PackageManager.GET_META_DATA)
        } catch (e: PackageManager.NameNotFoundException) {
            null
        }
    }

    if (appInfo == null) {
        Text("App not found", modifier = Modifier.padding(16.dp))
        return
    }

    val icon: Drawable = pm.getApplicationIcon(appInfo)
    val appName: String = pm.getApplicationLabel(appInfo).toString()
    val sizeInMB: Double = File(appInfo.sourceDir).length().toDouble() / (1024 * 1024)
    val apkPath = appInfo.sourceDir
    val sha256Hash = getSha256(File(apkPath))

    val permissions = remember {
        try {
            pm.getPackageInfo(packageName, PackageManager.GET_PERMISSIONS)?.requestedPermissions
                ?: emptyArray()
        } catch (e: Exception) {
            emptyArray()
        }
    }

    val dangerousPermissions = permissions.filter {
        try {
            val info = pm.getPermissionInfo(it, 0)
            info.protectionLevel and android.content.pm.PermissionInfo.PROTECTION_DANGEROUS != 0
        } catch (e: Exception) {
            false
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("App Details") },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Back")
                    }
                }
            )
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
        ) {
            // Icon
            Box(
                modifier = Modifier.fillMaxWidth(),
                contentAlignment = Alignment.Center
            ) {
                AsyncImage(
                    model = icon,
                    contentDescription = null,
                    modifier = Modifier.size(120.dp)
                )
            }

            Spacer(modifier = Modifier.height(16.dp))

            Text(
                text = appName,
                style = MaterialTheme.typography.titleLarge
            )

            Spacer(modifier = Modifier.height(6.dp))

            Text(
                text = "Size: ${"%.2f".format(sizeInMB)} MB",
                style = MaterialTheme.typography.bodyMedium
            )

            Spacer(modifier = Modifier.height(6.dp))

            Text(
                text = "App Hash: $sha256Hash",
                style = MaterialTheme.typography.bodySmall
            )

            Spacer(modifier = Modifier.height(16.dp))

            Text(
                text = "Dangerous Permissions:",
                style = MaterialTheme.typography.titleSmall.copy(fontWeight = FontWeight.Bold)
            )

            Spacer(modifier = Modifier.height(8.dp))

            if (dangerousPermissions.isEmpty()) {
                Text("None", style = MaterialTheme.typography.bodySmall)
            } else {
                Column(modifier = Modifier.fillMaxWidth()) {
                    dangerousPermissions.forEach {
                        Text(
                            text = it,
                            color = Color.Red,
                            fontSize = 13.sp, // slightly smaller but full text
                            modifier = Modifier
                                .padding(start = 12.dp, bottom = 4.dp)
                                .fillMaxWidth()
                        )
                    }
                }
            }
        }
    }
}

