package com.example.androidmalwaredetector.ui.screens

import android.content.pm.PackageManager
import android.content.pm.PermissionInfo
import android.graphics.drawable.Drawable
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.core.graphics.drawable.toBitmap
import androidx.navigation.NavController
import com.example.androidmalwaredetector.ui.components.StatusBadge
import com.example.androidmalwaredetector.util.getSha256
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import org.json.JSONArray
import org.json.JSONObject
import java.io.File
import java.net.HttpURLConnection
import java.net.URL

@Composable
fun AppDetailScreen(
    packageName: String,
    appName: String,
    navController: NavController,
    status: String? = null
) {
    val context = LocalContext.current
    val pm = context.packageManager

    var appIcon by remember { mutableStateOf<Drawable?>(null) }
    var sha256 by remember { mutableStateOf("") }
    var sizeInMB by remember { mutableStateOf(0.0) }
    var dangerousPermissions by remember { mutableStateOf<List<String>>(emptyList()) }
    var uploadStatus by remember { mutableStateOf<String?>(null) }
    val coroutineScope = rememberCoroutineScope()

    // Loading/upload state
    var isUploading by remember { mutableStateOf(false) }

    LaunchedEffect(packageName) {
        try {
            val appInfo = pm.getApplicationInfo(packageName, 0)
            appIcon = pm.getApplicationIcon(appInfo)

            val apkPath = appInfo.sourceDir
            val apkFile = File(apkPath)
            sha256 = getSha256(apkFile)
            sizeInMB = apkFile.length().toDouble() / (1024 * 1024)

            val packageInfo = pm.getPackageInfo(packageName, PackageManager.GET_PERMISSIONS)
            val requestedPermissions = packageInfo.requestedPermissions
            val filtered = mutableListOf<String>()

            requestedPermissions?.forEach { permission ->
                try {
                    val permInfo = pm.getPermissionInfo(permission, 0)
                    if ((permInfo.protectionLevel and PermissionInfo.PROTECTION_DANGEROUS) != 0) {
                        filtered.add(permission)
                    }
                } catch (_: Exception) {}
            }

            dangerousPermissions = filtered
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }

    // Updated: return type for upload
    suspend fun uploadApp(endpoint: String): Boolean {
        return withContext(Dispatchers.IO) {
            try {
                val url = URL(endpoint)
                val conn = url.openConnection() as HttpURLConnection
                conn.requestMethod = "POST"
                conn.setRequestProperty("Content-Type", "application/json")
                conn.doOutput = true

                val jsonBody = JSONObject()
                val appsArray = JSONArray()
                val appObject = JSONObject()
                appObject.put("appName", appName)
                appObject.put("packageName", packageName)
                appObject.put("sha256", sha256)
                appObject.put("sizeMB", sizeInMB)
                appObject.put("permissions", JSONArray(dangerousPermissions))
                // Mark as uploaded by user
                appObject.put("uploadedByUser", true)
                appsArray.put(appObject)
                jsonBody.put("apps", appsArray)

                conn.outputStream.use { os ->
                    os.write(jsonBody.toString().toByteArray())
                }

                val responseCode = conn.responseCode
                val responseText = conn.inputStream?.bufferedReader()?.readText() ?: ""
                if (responseCode in 200..299) {
                    uploadStatus = "✅ Uploaded successfully: $responseText"
                    true
                } else {
                    uploadStatus = "❌ Upload failed: $responseText"
                    false
                }
            } catch (e: Exception) {
                uploadStatus = "❌ Upload failed: ${e.message}"
                false
            }
        }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(20.dp)
            .verticalScroll(rememberScrollState()),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        appIcon?.let {
            Image(
                bitmap = it.toBitmap().asImageBitmap(),
                contentDescription = null,
                modifier = Modifier
                    .size(100.dp)
                    .padding(bottom = 12.dp)
            )
        }

        Text(
            text = appName,
            style = MaterialTheme.typography.titleLarge,
            fontWeight = FontWeight.Bold
        )

        status?.let {
            Spacer(modifier = Modifier.height(6.dp))
            StatusBadge(status = it)
        }

        Spacer(modifier = Modifier.height(16.dp))

        Text(
            text = "Size: %.2f MB".format(sizeInMB),
            style = MaterialTheme.typography.bodyMedium
        )

        Spacer(modifier = Modifier.height(12.dp))

        Text(
            text = "SHA-256:",
            style = MaterialTheme.typography.titleSmall,
            fontWeight = FontWeight.Medium
        )
        Text(
            text = sha256,
            style = MaterialTheme.typography.bodySmall,
            modifier = Modifier.padding(top = 4.dp)
        )

        Spacer(modifier = Modifier.height(20.dp))

        Text(
            text = "Dangerous Permissions:",
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.SemiBold
        )

        if (dangerousPermissions.isEmpty()) {
            Text("No dangerous permissions found", style = MaterialTheme.typography.bodyMedium)
        } else {
            Column(modifier = Modifier.fillMaxWidth()) {
                dangerousPermissions.forEach {
                    Text(
                        text = it,
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.error,
                        modifier = Modifier.padding(start = 12.dp, top = 4.dp)
                    )
                }
            }
        }

        Spacer(modifier = Modifier.height(20.dp))

        // Upload button with loading state
        Button(
            onClick = {
                if (!isUploading) {
                    coroutineScope.launch {
                        isUploading = true
                        val success = uploadApp("http://192.168.137.1:5000/api/app/upload")
                        // You may refresh ES list or UI after this if desired
                        isUploading = false
                    }
                }
            },
            enabled = !isUploading
        ) {
            if (isUploading) {
                CircularProgressIndicator(
                    modifier = Modifier
                        .size(16.dp),
                    color = MaterialTheme.colorScheme.onPrimary,
                    strokeWidth = 2.dp
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text("Uploading...")
            } else {
                Text("Upload App")
            }
        }

        uploadStatus?.let {
            Spacer(modifier = Modifier.height(10.dp))
            Text(it, textAlign = TextAlign.Center)
        }
    }
}