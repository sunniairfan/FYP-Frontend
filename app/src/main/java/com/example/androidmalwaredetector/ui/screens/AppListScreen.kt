package com.example.androidmalwaredetector.ui.screens

import android.content.pm.ApplicationInfo
import android.content.pm.PackageManager
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.androidmalwaredetector.model.AppInfo
import com.example.androidmalwaredetector.ui.components.AppCard
import java.io.File

@Composable
fun AppListScreen(navController: NavController) {
    val context = LocalContext.current
    val packageManager = context.packageManager
    var showUserApps by remember { mutableStateOf(true) }

    val blockedPrefixes = listOf(
        "com.android.cts", "com.google.android.test",
        "android.ext", "com.qualcomm.", "com.coloros.",
        "com.oplus.", "com.vivo.", "com.miui."
    )

    val allApps = remember {
        packageManager.getInstalledApplications(PackageManager.GET_META_DATA)
    }

    val apps = allApps.filter {
        if (showUserApps) {
            (it.flags and ApplicationInfo.FLAG_SYSTEM) == 0
        } else {
            (it.flags and ApplicationInfo.FLAG_SYSTEM) != 0
        }
    }.mapNotNull { app ->
        val appName = packageManager.getApplicationLabel(app).toString().trim()
        if (appName.isBlank() || appName.equals("null", true)) return@mapNotNull null
        if (blockedPrefixes.any { prefix -> app.packageName.startsWith(prefix) }) return@mapNotNull null

        val apkFile = File(app.sourceDir)
        AppInfo(
            appName = appName,
            packageName = app.packageName,
            icon = packageManager.getApplicationIcon(app),
            sizeInMB = apkFile.length().toDouble() / (1024 * 1024),
            apkPath = app.sourceDir
        )
    }

    Column {
        Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.Center) {
            Button(
                onClick = { showUserApps = true },
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (showUserApps) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surface
                )
            ) {
                Text("User Apps")
            }

            Spacer(modifier = Modifier.width(8.dp))

            Button(
                onClick = { showUserApps = false },
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (!showUserApps) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surface
                )
            ) {
                Text("System Apps")
            }
        }

        LazyColumn {
            items(apps) { app ->
                AppCard(
                    appInfo = app,
                    onClick = {
                        navController.navigate("detail/${app.packageName}")
                    }
                )
            }
        }
    }
}

