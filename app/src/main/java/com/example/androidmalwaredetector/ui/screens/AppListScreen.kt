package com.example.androidmalwaredetector.ui.screens

import android.content.pm.ApplicationInfo
import android.content.pm.PackageManager
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.androidmalwaredetector.model.AppInfo
import com.example.androidmalwaredetector.ui.components.AppCard
import com.example.androidmalwaredetector.util.appStatusMap
import com.example.androidmalwaredetector.util.uploadUserApps
import java.io.File

@Composable
fun AppListScreen(navController: NavController) {
    val context = LocalContext.current
    val pm = context.packageManager
    var showUserApps by remember { mutableStateOf(true) }

    LaunchedEffect(Unit) {
        uploadUserApps(context)
    }

    val apps = remember {
        pm.getInstalledApplications(PackageManager.GET_META_DATA)
            .filter {
                val isSystem = (it.flags and ApplicationInfo.FLAG_SYSTEM) != 0
                if (showUserApps) !isSystem else isSystem
            }
            .filterNot {
                listOf(
                    "com.android.cts", "com.google.android.test",
                    "android.ext", "com.qualcomm.", "com.coloros.",
                    "com.oplus.", "com.vivo.", "com.miui."
                ).any { prefix -> it.packageName.startsWith(prefix) }
            }
            .mapNotNull { app ->
                val appName = pm.getApplicationLabel(app).toString().trim()
                if (appName.isBlank()) return@mapNotNull null

                val apkFile = File(app.sourceDir)
                val status = appStatusMap[app.packageName] ?: "unknown"

                AppInfo(
                    appName = appName,
                    packageName = app.packageName,
                    icon = pm.getApplicationIcon(app),
                    sizeInBytes = apkFile.length(),
                    sha256 = "", // SHA not needed here
                    status = status
                )
            }
    }

    Column {
        Row(
            Modifier
                .fillMaxWidth()
                .padding(8.dp),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            Button(onClick = { showUserApps = true }) {
                Text("User Apps")
            }
            Button(onClick = { showUserApps = false }) {
                Text("System Apps")
            }
        }

        LazyColumn {
            items(apps) { app ->
                AppCard(appInfo = app) {
                    navController.navigate("detail/${app.packageName}/${app.appName}")
                }
            }
        }
    }
}
