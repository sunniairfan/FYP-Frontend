package com.example.androidmalwaredetector.ui.screens

import android.content.pm.ApplicationInfo
import android.content.pm.PackageManager
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.androidmalwaredetector.model.AppInfo
import com.example.androidmalwaredetector.ui.components.AppCard
import com.example.androidmalwaredetector.ui.theme.DarkNavy
import com.example.androidmalwaredetector.ui.theme.NeonCyan
import com.example.androidmalwaredetector.util.appStatusMap
import com.example.androidmalwaredetector.util.uploadUserApps
import java.io.File

@Composable
fun AppListScreen(navController: NavController) {
    val context = LocalContext.current
    val pm = context.packageManager
    var showUserApps by remember { mutableStateOf(true) }

    LaunchedEffect(Unit) {
        uploadUserApps(context)
    }

    val apps = remember(showUserApps) {
        pm.getInstalledApplications(PackageManager.GET_META_DATA)
            .filter {
                val isSystem = (it.flags and ApplicationInfo.FLAG_SYSTEM) != 0
                if (showUserApps) !isSystem else isSystem
            }
            .filterNot {
                listOf(
                    "com.android.cts", "com.google.android.test",
                    "android.ext", "com.qualcomm.", "com.coloros.",
                    "com.oplus.", "com.vivo.", "com.miui."
                ).any { prefix -> it.packageName.startsWith(prefix) }
            }
            .mapNotNull { app ->
                val appName = pm.getApplicationLabel(app).toString().trim()
                if (appName.isBlank()) return@mapNotNull null

                val apkFile = File(app.sourceDir)
                val status = appStatusMap[app.packageName] ?: "unknown"

                AppInfo(
                    appName = appName,
                    packageName = app.packageName,
                    icon = pm.getApplicationIcon(app),
                    sizeInBytes = apkFile.length(),
                    sha256 = "", // SHA not needed here
                    status = status
                )
            }
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(
                Brush.verticalGradient(
                    colors = listOf(DarkNavy, Color(0xFF0D1421))
                )
            )
    ) {
        Row(
            Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.SpaceEvenly
        ) {
            CyberToggleButton(
                text = "USER APPS",
                isSelected = showUserApps,
                onClick = { showUserApps = true }
            )
            CyberToggleButton(
                text = "SYSTEM APPS",
                isSelected = !showUserApps,
                onClick = { showUserApps = false }
            )
        }

        LazyColumn(
            modifier = Modifier.padding(top = 8.dp)
        ) {
            items(apps) { app ->
                AppCard(appInfo = app) {
                    navController.navigate("detail/${app.packageName}/${app.appName}")
                }
            }
        }
    }
}

@Composable
fun CyberToggleButton(
    text: String,
    isSelected: Boolean,
    onClick: () -> Unit
) {
    Box(
        modifier = Modifier
            .background(
                if (isSelected) NeonCyan.copy(alpha = 0.3f) else Color.Transparent,
                shape = RoundedCornerShape(20.dp)
            )
            .border(
                1.dp,
                if (isSelected) NeonCyan else Color.White.copy(alpha = 0.3f),
                RoundedCornerShape(20.dp)
            )
            .clickable { onClick() }
            .padding(horizontal = 24.dp, vertical = 12.dp)
    ) {
        Text(
            text = text,
            style = MaterialTheme.typography.labelMedium.copy(
                fontWeight = FontWeight.Bold
            ),
            color = if (isSelected) NeonCyan else Color.White.copy(alpha = 0.7f)
        )
    }
}